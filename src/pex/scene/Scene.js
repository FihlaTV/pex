// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Color, Context, Mesh, PerspectiveCamera, Scene;

  Context = require('pex/gl/Context');
  Mesh = require('pex/gl/Mesh');
  Color = require('pex/color/Color');
  PerspectiveCamera = require('pex/scene/PerspectiveCamera');
  return Scene = (function() {
    Scene.prototype.currentCamera = -1;

    Scene.prototype.clearColor = Color.BLACK;

    Scene.prototype.clearDepth = true;

    Scene.prototype.viewport = null;

    function Scene() {
      this.meshes = [];
      this.cameras = [];
      this.gl = Context.currentContext.gl;
    }

    Scene.prototype.setClearColor = function(color) {
      return this.clearColor = color;
    };

    Scene.prototype.setClearDepth = function(clearDepth) {
      return this.clearDepth = clearDepth;
    };

    Scene.prototype.setViewport = function(viewport) {
      return this.viewport = viewport;
    };

    Scene.prototype.add = function(obj) {
      if (obj instanceof Mesh) {
        this.meshes.push(obj);
      }
      if (obj instanceof PerspectiveCamera) {
        return this.cameras.push(obj);
      }
    };

    Scene.prototype.clear = function() {
      var clearBits;

      clearBits = 0;
      if (this.clearColor) {
        this.gl.clearColor(this.clearColor.r, this.clearColor.g, this.clearColor.b, this.clearColor.a);
        clearBits |= this.gl.COLOR_BUFFER_BIT;
      }
      if (this.clearDepth) {
        clearBits |= this.gl.DEPTH_BUFFER_BIT;
      }
      if (clearBits) {
        return this.gl.clear(clearBits);
      }
    };

    Scene.prototype.draw = function(camera) {
      var aspectRatio, mesh, _i, _len, _ref;

      if (!camera) {
        if (this.currentCamera >= 0 && this.currentCamera < this.cameras.length) {
          camera = this.cameras[this.currentCamera];
        } else if (this.cameras.length > 0) {
          camera = this.cameras[0];
        } else {
          throw 'Scene.draw: missing a camera';
        }
      }
      if (this.viewport) {
        this.viewport.bind();
        aspectRatio = this.viewport.bounds.width / this.viewport.bounds.height;
        if (camera.getAspectRatio() !== aspectRatio) {
          camera.setAspectRatio(aspectRatio);
        }
      }
      this.clear();
      _ref = this.meshes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mesh = _ref[_i];
        mesh.draw(camera);
      }
      if (this.viewport) {
        return this.viewport.unbind();
      }
    };

    return Scene;

  })();
});
