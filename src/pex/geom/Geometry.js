// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Color, Geometry, Vec2, Vec3, Vec4, elementSizeMap;

  Vec2 = require('pex/geom/Vec2');
  Vec3 = require('pex/geom/Vec3');
  Vec4 = require('pex/geom/Vec4');
  Color = require('pex/color/Color');
  elementSizeMap = {
    'Vec2': 2,
    'Vec3': 3,
    'Vec4': 4,
    'Color': 4
  };
  return Geometry = (function() {
    function Geometry(attribs) {
      var attrib, attribName, _ref, _ref1;

      this.faces = [];
      this.edges = [];
      this.attribs = attribs || {};
      _ref = this.attribs;
      for (attribName in _ref) {
        attrib = _ref[attribName];
        attrib.isDirty = true;
        attrib.elementSize = elementSizeMap[attrib.type];
        attrib.data = [];
        attrib.length = (_ref1 = attrib.length) != null ? _ref1 : 0;
        attrib.buf = new Float32Array(attrib.elementSize * attrib.length);
      }
    }

    Geometry.prototype.allocate = function(numVertices) {
      var attrib, attribName, i, _ref, _results;

      console.log('allocating');
      _ref = this.attribs;
      _results = [];
      for (attribName in _ref) {
        attrib = _ref[attribName];
        console.log('allocating', attribName);
        _results.push((function() {
          var _i, _ref1, _results1;

          _results1 = [];
          for (i = _i = 0, _ref1 = numVertices - 1; _i <= _ref1; i = _i += 1) {
            if (attrib.data[i] == null) {
              switch (attrib.type) {
                case 'Vec2':
                  _results1.push(attrib.data[i] = new Vec2());
                  break;
                case 'Vec3':
                  _results1.push(attrib.data[i] = new Vec3());
                  break;
                case 'Vec4':
                  _results1.push(attrib.data[i] = new Vec4());
                  break;
                case 'Color':
                  _results1.push(attrib.data[i] = new Color());
                  break;
                default:
                  _results1.push(void 0);
              }
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };

    return Geometry;

  })();
});
