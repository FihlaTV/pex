// Generated by CoffeeScript 1.6.2
define(function(require) {
  var Face3, Face4, Geometry;

  Face3 = require('pex/geom/Face3');
  Face4 = require('pex/geom/Face4');
  Geometry = require('pex/geom/Geometry');
  Geometry.prototype.translate = function(v) {
    return this.vertices.forEach(function(vert) {
      return vert.add(v);
    });
  };
  Geometry.prototype.scale = function(s) {
    return this.vertices.forEach(function(vert) {
      return vert.scale(s);
    });
  };
  Geometry.prototype.rotate = function(q) {
    return this.vertices.forEach(function(vert) {
      return vert.transformQuat(q);
    });
  };
  Geometry.merge = function(a, b) {
    var colors, face, faceOffset, faces, geom, i, normals, texCoords, vertexOffset, vertices, _i, _j, _k, _l, _m, _n, _o, _p, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

    vertices = a.vertices.concat(b.vertices);
    geom = new Geometry({
      vertices: vertices
    });
    vertexOffset = a.vertices.length;
    if (a.faces && b.faces) {
      faceOffset = a.faces.length;
      faces = [];
      for (i = _i = 0, _ref = a.faces.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        face = a.faces[i];
        if (face instanceof Face3) {
          faces.push(new Face3(face.a, face.b, face.c));
        } else {
          if (face instanceof Face4) {
            faces.push(new Face4(face.a, face.b, face.c, face.d));
          }
        }
      }
      for (i = _j = 0, _ref1 = b.faces.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        face = b.faces[i];
        if (face instanceof Face3) {
          faces.push(new Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset));
        } else {
          if (face instanceof Face4) {
            faces.push(new Face4(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset, face.d + vertexOffset));
          }
        }
      }
      geom.faces = faces;
    }
    if (a.normals && b.normals) {
      normals = [];
      for (i = _k = 0, _ref2 = a.normals.length - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        normals.push(a.normals[i].dup());
      }
      for (i = _l = 0, _ref3 = b.normals.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; i = 0 <= _ref3 ? ++_l : --_l) {
        normals.push(b.normals[i].dup());
      }
      geom.addAttrib('normals', 'normal', normals);
    }
    if (a.texCoords && b.texCoords) {
      texCoords = [];
      for (i = _m = 0, _ref4 = a.texCoords.length - 1; 0 <= _ref4 ? _m <= _ref4 : _m >= _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
        texCoords.push(a.texCoords[i].dup());
      }
      for (i = _n = 0, _ref5 = b.texCoords.length - 1; 0 <= _ref5 ? _n <= _ref5 : _n >= _ref5; i = 0 <= _ref5 ? ++_n : --_n) {
        texCoords.push(b.texCoords[i].dup());
      }
      geom.addAttrib('texCoords', 'texCoord', texCoords);
    }
    if (a.colors && b.colors) {
      colors = [];
      for (i = _o = 0, _ref6 = a.colors.length - 1; 0 <= _ref6 ? _o <= _ref6 : _o >= _ref6; i = 0 <= _ref6 ? ++_o : --_o) {
        colors.push(a.colors[i].dup());
      }
      for (i = _p = 0, _ref7 = b.colors.length - 1; 0 <= _ref7 ? _p <= _ref7 : _p >= _ref7; i = 0 <= _ref7 ? ++_p : --_p) {
        colors.push(b.colors[i].dup());
      }
      geom.addAttrib('colors', 'color', colors);
    }
    return geom;
  };
  return Geometry;
});
